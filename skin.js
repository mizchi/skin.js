// Generated by CoffeeScript 1.6.1
(function() {
  var Decorative, Skin,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Decorative = (function() {

    function Decorative() {}

    Decorative.prototype.remove = function() {
      var _ref;
      return (_ref = this.el.parentNode) != null ? _ref.removeChild(this.el) : void 0;
    };

    return Decorative;

  })();

  Skin = (function(_super) {

    __extends(Skin, _super);

    function Skin(el, opt) {
      var fields, name, vo, _i, _len;
      this.el = el;
      if (typeof opt === 'string') {
        this.tmpl = opt;
        opt = {};
      } else if (opt != null) {
        this.tmpl = opt.tmpl != null ? opt.tmpl : null;
      } else {
        opt = {};
      }
      this.target = opt.target != null ? opt.target : 'value';
      this.defaults = opt.defaults != null ? opt.defaults : {};
      if (!(this.el instanceof HTMLElement)) {
        this.el = document.querySelector(arguments[0]);
        if (!this.el) {
          throw 'element not found';
        }
      }
      if (this.tmpl != null) {
        this.el.innerHTML = this.tmpl;
      }
      this.target = "data-" + this.target;
      this.targetWithBracket = "[" + this.target + "]";
      this.valueMap = {};
      fields = this.el.querySelectorAll(this.targetWithBracket);
      if ((fields == null) || fields.length === 0) {
        throw 'there is not field';
      }
      for (_i = 0, _len = fields.length; _i < _len; _i++) {
        el = fields[_i];
        name = el.getAttribute(this.target);
        vo = new Skin.ValueObject(el);
        if (this.valueMap[name] == null) {
          this.valueMap[name] = [];
        }
        this.valueMap[name].push(vo);
      }
      if (this.defaults != null) {
        this.set(this.defaults);
      }
    }

    Skin.prototype.set = function(key, val) {
      var vo, _i, _len, _ref, _ref1, _results;
      if (arguments[0] instanceof Object) {
        _ref = arguments[0];
        for (key in _ref) {
          val = _ref[key];
          this.set(key, val);
        }
        return;
      }
      _ref1 = this.get(key);
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        vo = _ref1[_i];
        _results.push(vo.set(val));
      }
      return _results;
    };

    Skin.prototype.get = function(key) {
      return this.valueMap[key];
    };

    Skin.prototype.inject = function(key, fn) {
      var vo, _i, _len, _ref, _results;
      _ref = this.get(key);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        vo = _ref[_i];
        _results.push(fn(vo.el));
      }
      return _results;
    };

    Skin.prototype.destroy = function() {
      var key, keys, vo, _i, _j, _len, _len1, _ref;
      keys = (function() {
        var _results;
        _results = [];
        for (key in this.valueMap) {
          _results.push(key);
        }
        return _results;
      }).call(this);
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        key = keys[_i];
        _ref = this.valueMap[key];
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          vo = _ref[_j];
          vo.remove();
        }
        this.valueMap[key].length = 0;
        delete this.valueMap[key];
      }
      return this.remove();
    };

    return Skin;

  })(Decorative);

  Skin.ValueObject = (function(_super) {

    __extends(ValueObject, _super);

    function ValueObject(el) {
      this.el = el;
    }

    ValueObject.prototype.set = function(value) {
      return this.el.innerHTML = value;
    };

    return ValueObject;

  })(Decorative);

  Skin.addHelper = function(name, func) {
    return Decorative.prototype[name] = func;
  };

  if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {
    define(function() {
      return Skin;
    });
  } else {
    window.Skin = Skin;
  }

}).call(this);
