// Generated by CoffeeScript 1.4.0
(function() {
  var ValueObject, root;

  root = typeof window !== "undefined" && window !== null ? window : exports;

  ValueObject = (function() {

    function ValueObject(el) {
      this.el = el;
    }

    ValueObject.prototype.set = function(value) {
      return this.el.innerText = this._hook(value);
    };

    return ValueObject;

  })();

  root.Skin = (function() {

    function Skin(el, html) {
      var name, vo, _i, _len, _ref;
      this.el = el;
      if (html == null) {
        html = null;
      }
      if (!(this.el instanceof HTMLElement)) {
        this.el = document.querySelector(arguments[0]);
        if (!this.el) {
          throw 'element not found';
        }
      }
      if (html != null) {
        this.el.innerHTML = html;
      }
      this.valueMap = {};
      _ref = this.el.querySelectorAll('[data-value]');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        el = _ref[_i];
        name = el.getAttribute('data-value');
        vo = new ValueObject(el);
        if (this.valueMap[name] == null) {
          this.valueMap[name] = [];
        }
        this.valueMap[name].push(vo);
      }
    }

    Skin.prototype.set = function(key, val) {
      var vo, _i, _len, _ref, _ref1, _results;
      if (arguments[0] instanceof Object) {
        _ref = arguments[0];
        for (key in _ref) {
          val = _ref[key];
          this.set(key, val);
        }
        return;
      }
      _ref1 = this.valueMap[key];
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        vo = _ref1[_i];
        _results.push(vo.set(val));
      }
      return _results;
    };

    return Skin;

  })();

}).call(this);
